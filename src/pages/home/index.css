
/* display:flex;   the default could be 'flex-direction: row;' where all items are displayed only in row  */
 /* align-items: center;  aligns items in center , vertically ( not horizontally)  to align items horizontally '  justify-content: center;' */
/*The flex container properties are:

flex-direction : column; flex-direction: column-reverse; flex-direction: row;  flex-direction: row-reverse;
 flex-wrap: wrap;  flex-wrap: nowrap; ( no wrap will reduce the size of the element instead of wrapping)  The wrap value specifies that the flex items will wrap if necessary:
flex-flow: row wrap; The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.
justify-content: center; justify-content: flex-start;  justify-content: flex-end;  justify-content: space-around;   justify-content: space-between;// The justify-content property is used to align the flex items, horizontally . // The flex-start value aligns the flex items at the beginning of the container (this is default): //The flex-end value aligns the flex items at the end of the container:
  align-items: center; align-items: flex-start; align-items: stretch; align-items: baseline;//The center value aligns the flex items in the vertical middle of the container ,: // The flex-start value aligns the flex items at the top of the container: //The flex-end value aligns the flex items at the bottom of the container://The stretch value stretches the flex items (vertically) to fill the container (this is default): // The baseline value aligns the flex items such as their baselines aligns , such that the centers of all elements are aligned horizontally:
  align-content: space-between;//  align-content: space-around;//  align-content: stretch;//The stretch value stretches the flex lines to take up the remaining space (this is default):
*/

/*

.grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);  /* or   grid-template-columns: 1fr  1fr 1fr 1fr;
  grid-column-gap: 10px;
}

 in this instance we’re setting each of our four columns to one fraction (which happens to be 1/4 or 25%). But! There’s no overflow on the x-axis anymore because setting each column to 1fr takes that 10px into account automatically and subtracts it from the total width available for each column.

*/

/*  

p {
   /* word-wrap: break-word;* /
   overflow-wrap: anywhere;
  }
overflow-wrap: anywhere;     breaks words at any point. other wise the div (or p)  will not break until the end of word  */




 
.main_header{
    width: 100%; /*100vw; */
  /* height:100%; /* 100vw; makes the header height 100% of the parent element/tag. which was ultimately rendered as 100% of window. */
  height:calc(100vh-3rem) ; 
  display :grid;
    place-items:center;
    margin-top: 3rem;
    /*
    height:20rem;/*height:20rem;* /
    overflow:hidden;
    border-bottom: 2px solid var(--color-gray-400);*/ 
  }
  .main_header-container{
    /*margin-top : 10rem; /* added by me*/
    height:100%;
    display:grid;
    grid-template-columns:1fr 1fr;
    align-items:center;
    justify-content:space-between;
    gap:6rem;
    
  }
  .main_header-left{
    margin-top:3rem;
  
  }
  .main_header-left h4{
    margin-bottom:4rem;
   color : var(--color-secondary);
   font-weight : 400;
  }
  
  .main_header-left p{
  margin: 1rem 0 3.5rem;
  font-size:1.1rem;
  
  }
  
  .main_header-right{
  display:grid;
  place-items:center;
  position:relative; /* so that any element will be contained in the right */
  
  
  }
  .main_header-circle {
    width:25rem;
    height:25rem;
    background: linear-gradient(75deg, var(--color-secondary), transparent);
    border-radius:50%;
    position:absolute; /* to place it in the midle */
   }
  
  .main_header-image{
    position:relative;
  
  }

  .main_header-right:hover .main_header-circle {
   filter:blur(15px) ; 

}
/*----------- projects -------------------------*/
/* refer components/Projects.jsx   */
.projects {
    margin-top:4rem;
}

.projects_wrapper {
    display:grid; /*  can choose flex or grid  or ... */
    grid-template-columns:repeat(4,1fr); /* or repeat(4, 25%);  or  grid-template-columns: 25% 25% 25% 25%; */
    gap:3rem;
    margin-top:4rem;
}
.projects_project a {
    margin-top : 2.5rem;
    display:flex;
    align-items:center;
    justify-content:center;

}
.projects_project:hover  a {
    background : var(--color-secondary);
    color : var (--color-gray-600);

}
/*----------- objectives -------------------------*/
/* refer components/Objectives.jsx   */

/* container class */
.objectives_container {
    display:grid; /*  can choose flex or grid  or ... */
    grid-template-columns: 4fr 5fr ; /*38%  50%; */
    gap:2.4rem ; /* 12%; */
    margin-top:4rem;
}
.objectives_image{
    filter: saturate(0.25);
transition : var(--transition);


}

.objectives_image:hover{
    filter:saturate(1);

}

.objectives_right > p{
    margin: 1.5rem 0 5rem; /* 1.5rem for the top,0 for the left and right, 5 rem for the bottom   */ 
}

.objectives_wrapper { /* which has the cards */
    display:grid; /*  can choose flex or grid  or ... */
    grid-template-columns:repeat(4,1fr);
    gap:3.4rem 2.4rem; /*  3.4rem for the row gap, 2.4rem for the column gap  */
    margin-top:4rem;
}

/* refer src/index.css for card  */

.card.objectives_objective{
    padding-top : 3.5rem;
    text-align:left;
    position:relative; /*since icon is positioned absolute */

}

.card.objectives_objective span {
    position: absolute; /*  this places the span in front of other elements/text . run and test without margin/top*/
    top: -1.5rem; 
}

/*----------- FAQs -------------------------*/
/* refer components/FAQs.jsx   */

/*If the  overflow-wrap: anywhere;  is not set the components wont shrink (when broswer width is reduced), when there are long words. ( senenteces will only be broken at spaces and the paragraphs will be wide when there are long words) and the component will overflow beyond the borders at right */
p {  
    /* word-wrap: break-word;*/
    overflow-wrap: anywhere; 
   }
.faqs_wrapper {
    display:grid; /*  can choose flex or grid  or ... */
    grid-template-columns: 1fr  1fr;
    gap:1.5rem 5rem; /* 1.5rem for row gap and 5rem for the column gap */
    margin-top:4rem;
    align-items: flex-start;
}

.faq {
    background : var(--color-gray-500);
    padding: 2rem;
    border-radius : 1 rem;
    cursor:pointer;


}

.faq div{
    display:flex; /*  the default could be 'flex-direction: row;' where all items are displayed only in row  */
    justify-content: space-between;
align-items: center; /* aligns items in center , vertically ( not horizontally)  to align items horizontally '  justify-content: center;' */
}

.faq_icon{
    background: transparent;
    color: var(--color-gray-100);
    font-size: 1.5rem;
}

.faq p{
    margin-top : 1.5rem;
}


/*----------- Testimonials -------------------------*/
/* refer components/Testimonials.jsx   */
.testimonials{
width:50rem;
margin-inline :auto;
}

testimonials_head{
    justify-content:center;
}

.card.testimonial{
  position:relative;
  text-align:left;
  margin-top:5rem;  
}
.testimonial_quote{
    font-style:italic;
    margin:1rem 0 2rem;
}
.card small.testimonial_title{
margin-top:0.3rem;
}

.testimonial_avatar{
    width:4rem;
    height:4rem;
    border-radius:1.5rem;
    border:2px solid transparent;
    overflow:hidden;
    position:absolute;
    top:-2rem;
    left:calc(50%-2rem);
    box-shadow:0 1.5rem 2rem rgba(26,26,54,0.4);
    transition:var(--transition);

}
.testimonial:hover ,
testimonial_avatar{
    border-radius:50%;
    border-color:var(--color-gray-400);
}
.testimonials_btn-container{
    width:fit-content;
    margin:2.5rem auto 0;
    display:flex;
    justify-content:center;
    align-items:center;
    gap:1rem;
}
.testimonials_btn{
    background:transparent;
    cursor:pointer;
}
.testimonials_btn svg{
    fill:var(--color-primary);
    font-size:1.8rem;
    width:3rem;
    height:3rem;
}

/*following part of testimonial was written by me   */
/*
.testimonial_quote{
       text-align:center;
     }

.testimonial_title{
        text-align:center;
      }
      */
      
/*----------- footer -------------------------*/
/* refer components/Footer.jsx   */
footer{
    background:var(--color-primary);
    margin-top:7rem;
    padding-top:7rem;
    font-size:0.9rem;
    color:var(--color-gray-100);
}
.footer_container{
    display:grid;
    grid-template-columns:26rem 1fr 1fr 1fr;
    gap:6rem;

}
.footer_container article{
   display:flex;
    flex-direction:column;
    align-items:flex-start;
    gap:0.7 rem;
}

.footer_container article p{
   margin-top:0.5rem;

}
.footer_container article h4{
  margin-bottom:0.6rem;
  font-size:1rem;

}
.footer_socials {
    margin-top:1.5rem;
    display :flex;
    gap:1rem;
    align-items:center;
}

.footer_socials a {
    background:var(--color-gray-100);
    padding:0.7rem;
    border:1px solid transparent;
    border-radius: 0.6rem;
    transition: var(--transition);
}

.footer_socials a svg {
    color:var(--color-gray-600);
}

.footer_socials a:hover{
    border-color:var(--color-gray-100);
    background:transparent;

}

.footer_copyright{
 color:var(--color-gray-100);   
 text-align:center;
 padding:1.5rem 0;
 border-top:2px solid var(--color-primary-variant);
 margin-top: 5rem;
}

/* media queries (for medium screens) , for tablets   */

@media screen and (max-width: 1024px){ /* for tablets */
    /* body {
    background: red; test successful 
   }
   */
   .main_header {
     height:fit-content;
     padding:12rem 0; /* 12rem for top and bottom, 0 for left and right */
   }
  
   .main_header-container {
   gap:0;
  }
  .main_header-circle {
    width:16rem;
    height:16rem;
   }

   /*projects */
   .projects_wrapper{
    grid-template-columns :1fr 1fr;
   }

   /* objectives */
   .objectives_container{
    grid-template-columns :1fr ;
    justify-content :center;
    gap:4rem;
   }

   .objectives_wrapper{
       gap: 4rem 1rem; /* 4rem 3rem; /* 4rem for the row gap, and 3rem for the column gap  */
    }
.objectives_image{
    display:none;
}

/* FAQs */
.faqs_wrapper{
    grid-template-columns:1fr;
}
/* testimonials */
.testimonials{
  width:75%;  
}
/* footer */
.footer_container{
    grid-template-columns: 1fr 1fr;
    gap:4rem;
}
}


/* media queries (for small screens)  should be max-width: 600px but as desktop browser does not contract that much 700 was typed in  */
@media screen and (max-width: 700px){ 

    .main_header{
        margin-top:0;
        padding:12rem 0 0 ; /* 0 for the bottom and 0 for the left and right */
        height : 100vh;
    }
    .main_header-image,.main_header-circle{
        display:none;
    }

    .main_header-container {
        grid-template-columns:1fr;
    }

    /*projects */
   .projects_wrapper{
    grid-template-columns :1fr ;
    gap: 2rem;
    margin-top: 3rem;
   }
   .Projects_project{
    width: 84%;
    margin:0 auto; /* (top bottom margins are 0).  will put it right in the midle . or  margin-inline:auto;  both same*/
   }
 /* objectives */
   .objectives_wrapper{
    grid-template-columns : 1fr;
    gap: 3rem; /* in this instance, affects top and bottom gaps between child components  */
   }
   .card.objectives_objective{
    width:84%;
    margin-inline:auto; /* centers the components , in parent component . or margin:0 auto; both same */
   }

   /* FAQs */
.faqs_wrapper{
  gap:1rem;
  margin-top:3rem;
}
/* testimonials */
.testimonials{
    width: 100%;  
  }
  /* footer */

  footer{
    margin-top:7rem;
  }
  .footer_container{
      grid-template-columns: 1fr;
      gap:3rem;
  }
  .footer_container article{
    align-items:center; /* centers the items , horizontally  ( left and right margins equal)*/
  }

  .footer_container article p {
   text-align : center;
   
}


}
   